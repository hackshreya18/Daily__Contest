class Solution {
public:
    int maxValue(vector<int>& A, int K) {
        int N = A.size();

        auto make = [&]() {
            map<int, int> first;
            vector<set<int>> dp(K);
            dp[0].insert(0);
            for (int i = 0; i < N; ++i) {
                for (int v : dp[K - 1]) {
                    if (!first.count(v | A[i]))
                        first[v | A[i]] = i + 1;
                }
                for (int k = K - 2; k >= 0; --k) {
                    for (int v : dp[k])
                        dp[k + 1].insert(v | A[i]);
                }
            }
            return first;
        };

        map<int, int> prefix = make();
        reverse(A.begin(), A.end());
        map<int, int> suffix = make();

        int ans = 0;
        for (auto [u, n1] : prefix)
            for (auto [v, n2] : suffix)
                if (n1 + n2 <= N)
                    ans = max(ans, u ^ v);
        return ans;
    }
};
